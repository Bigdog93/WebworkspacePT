package com.koreait.first;

import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/BoardListServlet") // 이게 없었으면, web.xml에다가 엄청 길게 적어서 이쪽으로 연결을 시켜줘야 했다.
public class BoardListServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    public BoardListServlet() {
        super();
    }

    // Get 방식과 Post 방식의 차이점
    // Get : 서버에다가 자료를 보낼건데 주소에다가 담아서 보낸다. (네이버 검색시, 주소 마지막에(?뒤에) 검색어가 찍히는거 Get 방식) 비용이 적게 들고 속도가 조금 빠르다.
    // 대부분은 Get방식을 사용한다.
    // Post : 서버에다가 자료(요청)를 보내는데 숨겨서 보낸다. (보통 로그인시, 아이디와 비밀번호를 주소창에 담을 수 없기 때문에 Post 방식으로 보낸다.)
    // 같은 주소임에도 Get이냐 Post냐에 따라 다른 응답을 보낼 수도 있다.
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // 톰캣이 이거 나중에 호출해줄꺼야(프레임워크)
		// 내가 호출해서 쓰는거는 라이브러리, 누가 호출해서 쓰는걸 프레임워크
		System.out.println("doGet");
		
		response.getWriter()
		.append("Served at: ") // 이렇게 쓰는걸 체인메소드 기술
		.append(request.getContextPath()); // 이렇게 servelet에서 바로 뿌려줄 수도 있다.
		
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
		
		System.out.println("doPost");
		doGet(request, response);
	}
	

}
